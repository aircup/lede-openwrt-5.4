#
#
# 感谢以下两位大神的一键编译脚本
# 
# Copyright (C) 2019 P3TERX <https://p3terx.com>
# <https://github.com/danshui-git/Actions-OpenWrt.git>
#
# Copyright (C) 2019 KFERMercer <KFER.Mercer@gmail.com>
# <https://github.com/KFERMercer/OpenWrt-CI>
#
#

name: Lede-x86-64固件

on:
  repository_dispatch:

#编辑任意指定文件触发开始编译
  push:
    branches:
      - main
    paths:
      - '.config'

#release发布触发开始编译
#  release:
#    types: published

#定时触发开始编译(utc時間)
#  schedule:
#    - cron: 0 8 2,6,8,30 * *

#点星Star触发开始编译
#  watch:
#    types: started

env:
  CONFIG_FILE: diy.config
  DIY_OP_SH: diy-lede.sh
  SSH_ACTIONS: true
  UPLOAD_BIN_DIR: false
  UPLOAD_FIRMWARE: true
  UPLOAD_COWTRANSFER: false
  UPLOAD_WETRANSFER: false
  TZ: Asia/Shanghai


jobs:
  build_openwrt:
    name: 编译Lede固件
    runs-on: ubuntu-18.04
    if: github.event.repository.owner.id == github.event.sender.id

    steps:
      - name: 准备结束
        uses: actions/checkout@main

      - name: 安装编译固件所需系统
        env:
          DEBIAN_FRONTEND: noninteractive
        run: |
          docker rmi `docker images -q`
          sudo rm -rf /usr/share/dotnet /etc/mysql /etc/php /etc/apt/sources.list.d
          sudo -E apt-get -y purge azure-cli ghc* zulu* hhvm llvm* firefox google* dotnet* powershell openjdk* mysql* php*
          sudo -E apt-get update
          sudo -E apt-get -y install build-essential asciidoc binutils bzip2 gawk gettext git libncurses5-dev libz-dev patch python3 unzip zlib1g-dev lib32gcc1 libc6-dev-i386 subversion flex uglifyjs gcc-multilib g++-multilib p7zip p7zip-full msmtp libssl-dev texinfo libglib2.0-dev xmlto qemu-utils upx libelf-dev autoconf automake libtool autopoint device-tree-compiler antlr3 gperf swig
          sudo -E apt-get -y autoremove --purge
          sudo -E apt-get clean
          sudo timedatectl set-timezone "$TZ"
          df -h

      - name: 加载diy-lede.sh和feeds.conf.default文件
        run: |
          sed -i 's/\"#src-git\"/\"src-git\"/g' ./feeds.conf.default
          chmod +x $DIY_OP_SH
          $GITHUB_WORKSPACE/$DIY_OP_SH

      - name: 下载diy-lede.sh和feeds.conf.default自定义插件
        run: ./scripts/feeds update -a

      - name: 安装自定义软件
        run: ./scripts/feeds install -a

      - name: 加载diy.config自定义插件
        run: |
          [ -e files ] && mv files ./files
          [ -e $CONFIG_FILE ] && mv $CONFIG_FILE ./.config

      - name: SSH远程连接到服务器编辑自定义插件
        uses: P3TERX/debugger-action@main
        if: env.SSH_ACTIONS == 'true' || contains(github.event.action, 'ssh')

      - name: 下载软件包
        id: package
        run: |
          make defconfig
          make download -j8
          find dl -size -1024c -exec ls -l {} \;
          find dl -size -1024c -exec rm -f {} \;

      - name: 开始编译固件
        id: compile
        run: |
          echo -e "$(nproc) thread compile"
          make -j$(nproc) || make -j1 || make -j1 V=s
          echo "::set-output name=status::success"
          grep '^CONFIG_TARGET.*DEVICE.*=y' .config | sed -r 's/.*DEVICE_(.*)=y/\1/' > DEVICE_NAME
          [ -s DEVICE_NAME ] && echo "::set-env name=DEVICE_NAME::_$(cat DEVICE_NAME)"
          echo "::set-env name=FILE_DATE::_$(date +"%Y%m%d%H%M")"

      - name: 检测git空间使用情况
        if: (!cancelled())
        run: df -hT

      - name: 上传bin文件夹（固件+ipk）
        uses: actions/upload-artifact@main
        if: steps.compile.outputs.status == 'success' && env.UPLOAD_BIN_DIR == 'true'
        with:
          name: OpenWrt_lede_bin${{ env.DEVICE_NAME }}${{ env.FILE_DATE }}
          path: ./bin

      - name: 整理固件包
        id: organize
        if: env.UPLOAD_FIRMWARE == 'true' && !cancelled()
        run: |
          cd ./bin/targets/*/*
          rm -rf packages
          echo "::set-env name=FIRMWARE::$PWD"
          echo "::set-output name=status::success"

      - name: 上传固件在github空间
        uses: actions/upload-artifact@main
        if: steps.organize.outputs.status == 'success' && !cancelled()
        with:
          name: OpenWrt_lede_firmware${{ env.DEVICE_NAME }}${{ env.FILE_DATE }}
          path: ${{ env.FIRMWARE }}

      - name: 上传固件到cowtransfer网盘
        if: steps.organize.outputs.status == 'success' && env.UPLOAD_COWTRANSFER == 'true' && !cancelled()
        run: |
          curl -fsSL git.io/file-transfer | sh
          ./transfer cow --block 2621440 -s -p 64 --no-progress ${FIRMWARE} 2>&1 | tee cowtransfer.log
          echo "::warning file=cowtransfer.com::$(cat cowtransfer.log | grep https)"

      - name: 上传固件到WeTransfer网盘
        if: steps.organize.outputs.status == 'success' && env.UPLOAD_WETRANSFER == 'true' && !cancelled()
        run: |
          curl -fsSL git.io/file-transfer | sh
          ./transfer wet -s -p 16 --no-progress ${FIRMWARE} 2>&1 | tee wetransfer.log
          echo "::warning file=wetransfer.com::$(cat wetransfer.log | grep https)"
